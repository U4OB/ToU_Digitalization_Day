import 'package:flutter_application_1/assets/imgs/models/question_model.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';

// --- –ö–æ–Ω—Ç—Ä–∞–∫—Ç (–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å) –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è ---
abstract class QuizRepository {
  // –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∫–≤–∏–∑–∞. –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –º–æ–≥—É—Ç –±—ã—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
  // —Ç–∏–ø–∞ universityId –∏–ª–∏ questStage.
  Future<List<Question>> getQuestions();
}

// --- –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è —Å –ó–∞–≥–ª—É—à–∫–æ–π ---
class MockQuizRepository implements QuizRepository {
  // –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ, –∏–º–∏—Ç–∏—Ä—É—é—â–∏–µ –æ—Ç–≤–µ—Ç –±—ç–∫–µ–Ω–¥–∞
  final List<Map<String, dynamic>> _mockData = [
    {
      'id': 'q1',
      'text': '–ö–∞–∫–æ–≤–∞ —Å—Ç–æ–ª–∏—Ü–∞ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞?',
      'options': ['–ê–ª–º–∞—Ç—ã', '–®—ã–º–∫–µ–Ω—Ç', '–ê—Å—Ç–∞–Ω–∞', '–ö–∞—Ä–∞–≥–∞–Ω–¥–∞'],
      'correctAnswer': '–ê—Å—Ç–∞–Ω–∞',
    },
    {
      'id': 'q2',
      'text': '–ö—Ç–æ —è–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–æ–º —ç–ø–æ—Å–∞ "–ö–æ–±–ª–∞–Ω–¥—ã –±–∞—Ç—ã—Ä"?',
      'options': [
        '–ê–±–∞–π –ö—É–Ω–∞–Ω–±–∞–µ–≤',
        '–ñ–∞–º–±—ã–ª –ñ–∞–±–∞–µ–≤',
        '–ù–∞—Ä–æ–¥–Ω—ã–π —ç–ø–æ—Å',
        '–ú—É—Ö—Ç–∞—Ä –ê—É—ç–∑–æ–≤',
      ],
      'correctAnswer': '–ù–∞—Ä–æ–¥–Ω—ã–π —ç–ø–æ—Å',
    },
    {
      'id': 'q3',
      'text': '–ö–∞–∫–æ–µ –∫—Ä—É–ø–Ω–µ–π—à–µ–µ –æ–∑–µ—Ä–æ –≤ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–µ (—á–∞—Å—Ç–∏—á–Ω–æ)?',
      'options': ['–ë–∞–ª—Ö–∞—à', '–ê—Ä–∞–ª—å—Å–∫–æ–µ –º–æ—Ä–µ', '–ö–∞—Å–ø–∏–π—Å–∫–æ–µ –º–æ—Ä–µ', '–ó–∞–π—Å–∞–Ω'],
      'correctAnswer': '–ö–∞—Å–ø–∏–π—Å–∫–æ–µ –º–æ—Ä–µ',
    },
  ];

  @override
  Future<List<Question>> getQuestions() async {
    // –ò–º–∏—Ç–∞—Ü–∏—è —Å–µ—Ç–µ–≤–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2 —Å–µ–∫—É–Ω–¥—ã)
    await Future.delayed(const Duration(seconds: 2));

    try {
      // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –º–æ–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π Question
      return _mockData.map((json) => Question.fromJson(json)).toList();
    } catch (e) {
      // üí° –í–ê–ñ–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –õ–æ–≥–∏—Ä—É–µ–º –∏ –ø–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –æ–Ω–∞
      // –±—ã–ª–∞ –ø–æ–π–º–∞–Ω–∞ –≤ Notifier –∏ –≤—ã–≤–µ–ª–∞ UI –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è "–∑–∞–≥—Ä—É–∑–∫–∏".
      print('–û–®–ò–ë–ö–ê –í –†–ï–ü–û–ó–ò–¢–û–†–ò–ò: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å/—Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã. $e');
      rethrow;
    }
  }
}

// --- –ü—Ä–æ–≤–∞–π–¥–µ—Ä—ã ---

// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è QuizRepository
final quizRepositoryProvider = Provider<QuizRepository>((ref) {
  // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç QuizRepositoryImpl(httpClient: ...)
  return MockQuizRepository();
});
