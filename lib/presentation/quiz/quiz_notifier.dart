import 'package:flutter_application_1/presentation/quiz/quiz_repository.dart';
import 'package:flutter_application_1/assets/imgs/models/question_model.dart';
import 'package:flutter_application_1/presentation/quest/quest_notifier.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';

// --- –°–æ—Å—Ç–æ—è–Ω–∏–µ –ö–≤–∏–∑–∞ ---

class QuizState {
  // –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
  final List<Question> questions;
  // –ò–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è
  final int currentQuestionIndex;
  // –û—Ç–≤–µ—Ç, –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
  final String? selectedAnswer;
  // –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —Å—á–µ—Ç –∑–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
  final int score;
  // –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, –∑–∞–≤–µ—Ä—à–µ–Ω –ª–∏ –∫–≤–∏–∑
  final bool isCompleted;

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º AsyncValue –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∑–∞–≥—Ä—É–∑–∫–∏/–æ—à–∏–±–∫–∏
  final AsyncValue<void> loadingState;

  QuizState({
    this.questions = const [],
    this.currentQuestionIndex = 0,
    this.selectedAnswer,
    this.score = 0,
    this.isCompleted = false,
    this.loadingState = const AsyncValue.data(null),
  });

  // –ì–µ—Ç—Ç–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
  Question? get currentQuestion =>
      questions.isEmpty ? null : questions[currentQuestionIndex];

  // –ì–µ—Ç—Ç–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ—Å–ª–µ–¥–Ω–∏–π –ª–∏ —ç—Ç–æ –≤–æ–ø—Ä–æ—Å
  bool get isLastQuestion => currentQuestionIndex == questions.length - 1;

  // –ú–µ—Ç–æ–¥ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
  QuizState copyWith({
    List<Question>? questions,
    int? currentQuestionIndex,
    String? selectedAnswer,
    int? score,
    bool? isCompleted,
    AsyncValue<void>? loadingState,
  }) {
    return QuizState(
      questions: questions ?? this.questions,
      currentQuestionIndex: currentQuestionIndex ?? this.currentQuestionIndex,
      selectedAnswer:
          selectedAnswer, // –ü—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
      score: score ?? this.score,
      isCompleted: isCompleted ?? this.isCompleted,
      loadingState: loadingState ?? this.loadingState,
    );
  }
}

// --- Notifier –ö–≤–∏–∑–∞ ---

class QuizNotifier extends StateNotifier<QuizState> {
  final QuizRepository _repository;
  final QuestNotifier _questNotifier;

  // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤ –∑–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ –∫–≤–∏–∑–µ
  static const int pointsPerQuestion = 10;
  // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∑–∞–¥–∞–Ω–∏—è (–¥–ª—è QuestNotifier)
  static const String quizTaskId = 'MAIN_QUIZ_001';

  QuizNotifier(this._repository, this._questNotifier) : super(QuizState()) {
    // üí° –î–ï–ë–ê–ì-–õ–û–ì 1: Notifier —Å–æ–∑–¥–∞–Ω
    print('‚úÖ DEBUG 1: QuizNotifier —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.');
  }

  // 1. –ó–∞–≥—Ä—É–∑–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
  Future<void> loadQuestions() async {
    // üí° –î–ï–ë–ê–ì-–õ–û–ì 2: –í—ã–∑–æ–≤ loadQuestions
    print('‚úÖ DEBUG 2: –ù–∞—á–∞—Ç –≤—ã–∑–æ–≤ loadQuestions().');

    // –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å—ã —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –ø—Ä–æ—Å—Ç–æ —Å–±—Ä–æ—Å–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –∫–≤–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω
    if (state.questions.isNotEmpty && !state.isCompleted) return;

    state = state.copyWith(loadingState: const AsyncValue.loading());

    try {
      final questions = await _repository.getQuestions();

      // üí° –î–ï–ë–ê–ì-–õ–û–ì 3: –í–æ–ø—Ä–æ—Å—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã
      print(
        '‚úÖ DEBUG 3: –í–æ–ø—Ä–æ—Å—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è. –í—Å–µ–≥–æ: ${questions.length}',
      );

      state = state.copyWith(
        questions: questions,
        currentQuestionIndex: 0,
        score: 0,
        isCompleted: false,
        loadingState: const AsyncValue.data(null),
        selectedAnswer: null,
      );
    } catch (e, st) {
      // –ó–¥–µ—Å—å –ª–æ–≤–∏—Ç—Å—è –æ—à–∏–±–∫–∞ –∏–∑ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç UI –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—à–∏–±–∫–∏
      state = state.copyWith(loadingState: AsyncValue.error(e, st));
      // üí° –î–ï–ë–ê–ì-–õ–û–ì 4: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
      print('‚ùå DEBUG 4: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤: $e. StackTrace: $st');
    }
  }

  // 2. –í—ã–±–æ—Ä –æ—Ç–≤–µ—Ç–∞
  void selectAnswer(String answer) {
    state = state.copyWith(selectedAnswer: answer);
  }

  // 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É (–∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–≤–∏–∑–∞)
  Future<void> submitAnswerAndAdvance() async {
    final currentQuestion = state.currentQuestion;
    final selectedAnswer = state.selectedAnswer;

    if (currentQuestion == null || selectedAnswer == null) {
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –≤—ã–±—Ä–∞—Ç—å –æ—Ç–≤–µ—Ç
      return;
    }

    int newScore = state.score;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç
    if (currentQuestion.isCorrect(selectedAnswer)) {
      newScore += pointsPerQuestion;
    }

    // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å
    if (state.isLastQuestion) {
      state = state.copyWith(
        score: newScore,
        isCompleted: true,
        currentQuestionIndex:
            state.currentQuestionIndex + 1, // –î–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –≥—Ä–∞–Ω–∏—Ü
      );
      // –ù–∞—á–∏—Å–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—á–µ—Ç –∑–∞ –≤–µ—Å—å –∫–≤–∏–∑
      _finalizeQuizScore(newScore);
    } else {
      // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
      state = state.copyWith(
        currentQuestionIndex: state.currentQuestionIndex + 1,
        score: newScore,
        selectedAnswer: null, // –°–±—Ä–æ—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
      );
    }
  }

  // 4. –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤ –≤ –æ–±—â–∏–π –∫–≤–µ—Å—Ç
  void _finalizeQuizScore(int finalQuizScore) {
    if (finalQuizScore > 0) {
      // –ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º quizTaskId –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –±—ã–ª –ª–∏ –∫–≤–∏–∑ —É–∂–µ –ø—Ä–æ–π–¥–µ–Ω
      // –ù–∞—á–∏—Å–ª—è–µ–º –±–∞–ª–ª—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–∞–¥–∞–Ω–∏–µ –µ—â–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.
      final success = _questNotifier.addScore(finalQuizScore, quizTaskId);

      if (success) {
        print(
          '–£–°–ü–ï–•: –ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞—á–∏—Å–ª–µ–Ω–æ $finalQuizScore –±–∞–ª–ª–æ–≤ –≤ –æ–±—â–∏–π —Å—á–µ—Ç.',
        );
      } else {
        print(
          '–ö–≤–∏–∑ —É–∂–µ –±—ã–ª –ø—Ä–æ–π–¥–µ–Ω. –†–µ–∑—É–ª—å—Ç–∞—Ç $finalQuizScore, –Ω–æ –±–∞–ª–ª—ã –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.',
        );
      }
    }
  }

  // 5. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–≤–∏–∑–∞
  void restartQuiz() {
    loadQuestions(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  }
}

// --- –ü—Ä–æ–≤–∞–π–¥–µ—Ä—ã ---

final quizNotifierProvider = StateNotifierProvider<QuizNotifier, QuizState>((
  ref,
) {
  // 1. –ß–∏—Ç–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π (Data Layer)
  final repository = ref.watch(quizRepositoryProvider);
  // 2. –ß–∏—Ç–∞–µ–º QuestNotifier (–¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –±–∞–ª–ª–æ–≤)
  // üí° –ï—Å–ª–∏ —ç—Ç–æ—Ç ref.watch(questNotifierProvider.notifier) –ø–∞–¥–∞–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ,
  // —Ç–æ QuizNotifier –Ω–µ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω, –∏ –º—ã –Ω–µ —É–≤–∏–¥–∏–º –¥–∞–∂–µ "DEBUG 1".
  final questNotifier = ref.watch(questNotifierProvider.notifier);

  return QuizNotifier(repository, questNotifier);
});
