import 'package:flutter_riverpod/flutter_riverpod.dart';

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–≤–µ—Å—Ç–∞: —Ö—Ä–∞–Ω–∏—Ç –æ–±—â–∏–π —Å—á–µ—Ç –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è

class QuestState {
  // üîë –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏

  final int totalScore;

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º Set<String> –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π

  final Set<String> completedTasks;

  QuestState({this.totalScore = 0, this.completedTasks = const {}});

  QuestState copyWith({int? totalScore, Set<String>? completedTasks}) {
    return QuestState(
      totalScore: totalScore ?? this.totalScore,

      completedTasks: completedTasks ?? this.completedTasks,
    );
  }
}

// StateNotifier (–Ω–µ Async, —Ç–∞–∫ –∫–∞–∫ –º—ã —É–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º)

class QuestNotifier extends StateNotifier<QuestState> {
  QuestNotifier() : super(QuestState());

  // –ú–µ—Ç–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—á–∫–æ–≤ –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ

  bool addScore(int points, String taskId) {
    if (state.completedTasks.contains(taskId)) {
      print('–ó–∞–¥–∞–Ω–∏–µ $taskId —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ. –°—á–µ—Ç –Ω–µ –∏–∑–º–µ–Ω–µ–Ω.');

      return false; // –ó–∞–¥–∞–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
    }

    // –î–æ–±–∞–≤–ª—è–µ–º ID –≤ —Å–ø–∏—Å–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö

    final newCompleted = {...state.completedTasks, taskId};

    // –û–±–Ω–æ–≤–ª—è–µ–º totalScore

    final newScore = state.totalScore + points;

    state = state.copyWith(totalScore: newScore, completedTasks: newCompleted);

    print('–î–æ–±–∞–≤–ª–µ–Ω–æ $points –æ—á–∫–æ–≤. –û–±—â–∏–π —Å—á–µ—Ç: $newScore');

    return true; // –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
  }

  // –°–±—Ä–æ—Å –∫–≤–µ—Å—Ç–∞

  void resetQuest() {
    state = QuestState();
  }
}

final questNotifierProvider = StateNotifierProvider<QuestNotifier, QuestState>(
  (ref) => QuestNotifier(),
);
