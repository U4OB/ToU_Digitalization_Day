import 'package:flutter_riverpod/flutter_riverpod.dart';

// --- –ú–æ–¥–µ–ª—å –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å Telegram ID) ---
class UserData {
  // Telegram ID, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ userId
  final String userId;
  // –ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è –∏–∑ Telegram (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
  final String? fullName;
  // –í—ã–±—Ä–∞–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∞
  final String? groupId;

  UserData({required this.userId, this.fullName, this.groupId});

  UserData copyWith({String? groupId}) {
    return UserData(userId: userId, fullName: fullName, groupId: groupId);
  }
}

class AuthNotifier extends StateNotifier<AsyncValue<UserData?>> {
  // --- MOCK –î–ê–ù–ù–´–ï –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ---
  static const String mockTelegramId = 'tg_user_123456789';
  static const String mockFullName = '–ê–ª–∏–±–µ–∫ –ö–≤–µ—Å—Ç–æ–≤';

  AuthNotifier() : super(const AsyncValue.loading()) {
    _initializeAuth();
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ Telegram ID
  Future<void> _initializeAuth() async {
    try {
      // 1. –ò–º–∏—Ç–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è Telegram User ID (–∑–∞–¥–µ—Ä–∂–∫–∞ 1—Å)
      await Future.delayed(const Duration(milliseconds: 500));
      final userId = mockTelegramId;

      // 2. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–≥—Ä—É–ø–ø–∞ –ø–æ–∫–∞ null)
      state = AsyncValue.data(
        UserData(
          userId: userId,
          fullName: mockFullName,
          groupId: null, // –ì—Ä—É–ø–ø–∞ –ø–æ–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞
        ),
      );
      print(
        'AuthNotifier: –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram ID ($userId) –∑–∞–≤–µ—Ä—à–µ–Ω–∞.',
      );
    } catch (e, st) {
      print('AuthNotifier Error during initialization: $e');
      state = AsyncValue.error(e, st);
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
  Future<void> setGroup(String groupId) async {
    final currentUserData = state.value;
    if (currentUserData == null) {
      state = AsyncValue.error(
        '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω',
        StackTrace.current,
      );
      return;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä—É–ø–ø—É in-memory
    state.whenData((userData) {
      if (userData != null) {
        state = AsyncValue.data(userData.copyWith(groupId: groupId));
        print(
          'AuthNotifier: –ì—Ä—É–ø–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ $groupId (in-memory).',
        );
      }
    });
  }

  // üîë 1. –ì–µ—Ç—Ç–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è userId (Telegram ID)
  String? get telegramId {
    return state.value?.userId;
  }

  // üîë 2. –ì–µ—Ç—Ç–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è groupId
  String? get groupId {
    return state.value?.groupId;
  }

  // üîë 3. –ú–µ—Ç–æ–¥ –¥–ª—è —Å–±—Ä–æ—Å–∞ –≥—Ä—É–ø–ø—ã (–∏–º–∏—Ç–∞—Ü–∏—è –≤—ã—Ö–æ–¥–∞/—Ä–∞–∑–ª–æ–≥–∏–Ω–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º ID)
  void resetGroup() {
    state.whenData((userData) {
      if (userData != null) {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º groupId –æ–±—Ä–∞—Ç–Ω–æ –≤ null, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ —ç–∫—Ä–∞–Ω –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã
        state = AsyncValue.data(userData.copyWith(groupId: null));
        print('AuthNotifier: –ì—Ä—É–ø–ø–∞ —Å–±—Ä–æ—à–µ–Ω–∞. –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.');
      }
    });
  }
}

// --- –ü—Ä–æ–≤–∞–π–¥–µ—Ä—ã ---

final authNotifierProvider =
    StateNotifierProvider<AuthNotifier, AsyncValue<UserData?>>((ref) {
      // Notifier –ø—Ä–æ—Å—Ç–æ —Å–æ–∑–¥–∞–µ—Ç—Å—è, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ
      return AuthNotifier();
    });
