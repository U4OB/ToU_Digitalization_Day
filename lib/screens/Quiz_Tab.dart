import 'package:flutter/material.dart';
import 'package:flutter_application_1/presentation/quiz/quiz_notifier.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞—Å—Ç–æ–º–Ω—ã–º —Ü–≤–µ—Ç–∞–º (AppColors)

class QuizTab extends ConsumerWidget {
  const QuizTab({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    // –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç–æ–≤—É—é —Å—Ö–µ–º—É –∏–∑ —Ç–µ–º—ã –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏
    final colorScheme = Theme.of(context).colorScheme;
    final textTheme = Theme.of(context).textTheme;

    // 1. –ß–∏—Ç–∞–µ–º Notifier –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –µ–≥–æ –º–µ—Ç–æ–¥–∞–º
    final notifier = ref.read(quizNotifierProvider.notifier);

    // 2. –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏/–≤–æ–ø—Ä–æ—Å–æ–≤
    final state = ref.watch(quizNotifierProvider);

    // üí° –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ loadQuestions().
    if (state.questions.isEmpty &&
        !state.loadingState.isLoading &&
        !state.loadingState.hasError) {
      WidgetsBinding.instance.addPostFrameCallback((_) {
        if (ref.exists(quizNotifierProvider) &&
            ref.read(quizNotifierProvider).questions.isEmpty) {
          notifier.loadQuestions();
        }
      });
    }

    // --- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π ---

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
    if (state.loadingState.isLoading) {
      return Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            // –°—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π CircularProgressIndicator (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç primary: Cyan)
            CircularProgressIndicator(color: colorScheme.primary),
            const SizedBox(height: 20),
            // –°—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            Text(
              '–ó–∞–≥—Ä—É–∑–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤...',
              style: textTheme.bodyLarge, // –ë–µ–ª—ã–π —Ç–µ–∫—Å—Ç
            ),
          ],
        ),
      );
    }

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—à–∏–±–∫–∏
    if (state.loadingState.hasError) {
      return Center(
        child: Padding(
          padding: const EdgeInsets.all(32.0),
          child: Text(
            '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${state.loadingState.error}',
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–≤–µ—Ç –æ—à–∏–±–∫–∏ –∏–∑ —Ç–µ–º—ã
            style: textTheme.bodyLarge?.copyWith(color: colorScheme.error),
            textAlign: TextAlign.center,
          ),
        ),
      );
    }

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–≤–∏–∑–∞ (–∏–ª–∏ –µ—Å–ª–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–µ—Ç)
    if (state.isCompleted || state.currentQuestion == null) {
      return _buildCompletionScreen(context, state, notifier);
    }

    // --- –ê–∫—Ç–∏–≤–Ω—ã–π –ö–≤–∏–∑ ---
    final currentQuestion = state.currentQuestion!;

    return SingleChildScrollView(
      child: Padding(
        padding: const EdgeInsets.all(20.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            // –ü—Ä–æ–≥—Ä–µ—Å—Å
            _buildProgress(context, state),
            const SizedBox(height: 30),

            // –¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
            Text(
              currentQuestion.text,
              // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏, —Ü–≤–µ—Ç - –±–µ–ª—ã–π
              style: textTheme.titleLarge?.copyWith(fontSize: 20),
              textAlign: TextAlign.center,
            ),
            const SizedBox(height: 30),

            // –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
            ...currentQuestion.options.map((option) {
              return _buildOptionButton(
                context,
                option: option,
                isSelected: state.selectedAnswer == option,
                onTap: () => notifier.selectAnswer(option),
              );
            }),

            const SizedBox(height: 40),

            // –ö–Ω–æ–ø–∫–∞ "–û—Ç–≤–µ—Ç–∏—Ç—å/–ó–∞–≤–µ—Ä—à–∏—Ç—å"
            // –£–¥–∞–ª—è–µ–º –∂–µ—Å—Ç–∫–æ –∑–∞–¥–∞–Ω–Ω—ã–π —Å—Ç–∏–ª—å, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è ElevatedButtonTheme
            ElevatedButton(
              // –ö–Ω–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –æ—Ç–≤–µ—Ç
              onPressed: state.selectedAnswer != null
                  ? notifier.submitAnswerAndAdvance
                  : null,
              // –£–¥–∞–ª—è–µ–º styleFrom, –ø–æ–ª–∞–≥–∞—è—Å—å –Ω–∞ AppThemes –¥–ª—è –Ω–µ–æ–Ω–æ–≤–æ–≥–æ —Å—Ç–∏–ª—è
              child: Text(
                state.isLastQuestion ? '–ó–∞–≤–µ—Ä—à–∏—Ç—å –ö–≤–∏–∑' : '–û—Ç–≤–µ—Ç–∏—Ç—å –∏ –î–∞–ª–µ–µ',
                style: textTheme.labelLarge?.copyWith(
                  // –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–µ–º–Ω—ã–º (background)
                  color: colorScheme.onPrimary,
                  fontWeight: FontWeight.bold,
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  // --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã UI ---

  // –í–∏–¥–∂–µ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  Widget _buildProgress(BuildContext context, QuizState state) {
    if (state.questions.isEmpty) return const SizedBox.shrink();

    final colorScheme = Theme.of(context).colorScheme;
    final textTheme = Theme.of(context).textTheme;

    final total = state.questions.length;
    final current = state.currentQuestionIndex + 1;
    final progress = current / total;

    return Column(
      children: [
        Text(
          '–í–æ–ø—Ä–æ—Å $current –∏–∑ $total',
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ç–æ—Ä–æ—Å—Ç–µ–ø–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ —Ç–µ–º—ã
          style: textTheme.titleSmall,
        ),
        const SizedBox(height: 8),
        LinearProgressIndicator(
          value: progress,
          // –¶–≤–µ—Ç —Ñ–æ–Ω–∞: —Å–≤–µ—Ç–ª—ã–π –æ—Ç—Ç–µ–Ω–æ–∫ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏
          backgroundColor: colorScheme.surface.withOpacity(0.7),
          // –¶–≤–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: –∞–∫—Ü–µ–Ω—Ç–Ω—ã–π —Ü–≤–µ—Ç (Cyan)
          valueColor: AlwaysStoppedAnimation<Color>(colorScheme.primary),
          minHeight: 8,
          borderRadius: BorderRadius.circular(4),
        ),
      ],
    );
  }

  // –í–∏–¥–∂–µ—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏-–≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞
  Widget _buildOptionButton(
    BuildContext context, {
    required String option,
    required bool isSelected,
    required VoidCallback onTap,
  }) {
    final colorScheme = Theme.of(context).colorScheme;
    final textTheme = Theme.of(context).textTheme;

    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 8.0),
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º InkWell –∏ Container –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –≤–∏–¥–∞,
      // –Ω–∞–ø–æ–º–∏–Ω–∞—é—â–µ–≥–æ OutlinedButton, –Ω–æ —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–¥ —Ç–µ–º–Ω—É—é —Ç–µ–º—É.
      child: Material(
        color: isSelected
            ? colorScheme.primary.withOpacity(
                0.15,
              ) // –í—ã–±—Ä–∞–Ω–Ω—ã–π: –ª–µ–≥–∫–∏–π –Ω–µ–æ–Ω–æ–≤—ã–π —Ñ–æ–Ω
            : colorScheme.surface, // –ù–µ–≤—ã–±—Ä–∞–Ω–Ω—ã–π: —Ñ–æ–Ω –∫–∞—Ä—Ç–æ—á–∫–∏
        elevation: isSelected ? 8 : 4,
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(12),
          side: BorderSide(
            // –ì—Ä–∞–Ω–∏—Ü–∞: —è—Ä–∫–∞—è, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞, —Ç—É—Å–∫–ª–∞—è, –µ—Å–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞
            color: isSelected
                ? colorScheme.primary
                : colorScheme.surface.withOpacity(0.5),
            width: isSelected ? 2.5 : 1,
          ),
        ),
        child: InkWell(
          onTap: onTap,
          borderRadius: BorderRadius.circular(12),
          child: Container(
            padding: const EdgeInsets.symmetric(vertical: 18, horizontal: 16),
            alignment: Alignment.centerLeft,
            child: Text(
              option,
              textAlign: TextAlign.left,
              style: textTheme.bodyLarge?.copyWith(
                fontSize: 16,
                // –¢–µ–∫—Å—Ç: –∞–∫—Ü–µ–Ω—Ç–Ω—ã–π, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω, –±–µ–ª—ã–π, –µ—Å–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω
                color: isSelected ? colorScheme.primary : colorScheme.onSurface,
                fontWeight: isSelected ? FontWeight.bold : FontWeight.normal,
              ),
            ),
          ),
        ),
      ),
    );
  }

  // –≠–∫—Ä–∞–Ω –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–≤–∏–∑–∞
  Widget _buildCompletionScreen(
    BuildContext context,
    QuizState state,
    QuizNotifier notifier,
  ) {
    final colorScheme = Theme.of(context).colorScheme;
    final textTheme = Theme.of(context).textTheme;
    final maxScore = state.questions.length * QuizNotifier.pointsPerQuestion;

    // –¶–≤–µ—Ç —É—Å–ø–µ—Ö–∞ - Neon Green (secondary accent)
    final successColor = colorScheme.secondary;

    return Center(
      child: Padding(
        padding: const EdgeInsets.all(30.0),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            // –ò–∫–æ–Ω–∫–∞ —É—Å–ø–µ—Ö–∞
            Icon(
              Icons.check_circle_outline,
              size: 80,
              color: successColor, // Neon Green
            ),
            const SizedBox(height: 20),
            // –¢–µ–∫—Å—Ç "–ö–≤–∏–∑ –ó–∞–≤–µ—Ä—à–µ–Ω"
            Text(
              '–ö–≤–∏–∑ –ó–∞–≤–µ—Ä—à–µ–Ω!',
              style: textTheme.headlineMedium?.copyWith(
                fontSize: 26,
                color: successColor, // Neon Green
              ),
            ),
            const SizedBox(height: 10),
            // –°—á–µ—Ç
            Text(
              '–í—ã –Ω–∞–±—Ä–∞–ª–∏ ${state.score} –∏–∑ $maxScore –≤–æ–∑–º–æ–∂–Ω—ã—Ö –±–∞–ª–ª–æ–≤.',
              textAlign: TextAlign.center,
              style: textTheme.titleMedium, // –ë–µ–ª—ã–π —Ç–µ–∫—Å—Ç
            ),
            const SizedBox(height: 40),

            // –ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ" (CTA)
            ElevatedButton.icon(
              onPressed: notifier.restartQuiz,
              icon: const Icon(Icons.refresh),
              label: const Text('–ü—Ä–æ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ'),
              // –£–±–∏—Ä–∞–µ–º styleFrom, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ElevatedButtonTheme
              // (–ù–µ–æ–Ω–æ–≤—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç Cyan/Green)
            ),
          ],
        ),
      ),
    );
  }
}
